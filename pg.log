 LOG:  database system was shut down at 2025-08-01 23:06:00 CEST
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
postgres LOG:  statement: CREATE USER freecodecamp WITH CREATEDB
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql
[unknown] LOG:  connection received: host=[local]
freecodecamp LOG:  connection authorized: user=freecodecamp database=postgres application_name=psql
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
[unknown] LOG:  connection received: host=127.0.0.1 port=33440
postgres LOG:  connection authorized: user=postgres database=postgres
postgres LOG:  statement: SELECT datname FROM pg_catalog.pg_database WHERE datname='first_database';
freecodecamp ERROR:  syntax error at or near "CREATE" at character 32
freecodecamp STATEMENT:  CREATE DATABASE first_database
	CREATE DATABASE first_database;
freecodecamp LOG:  statement: CREATE DATABASE first_database;
[unknown] LOG:  connection received: host=127.0.0.1 port=57166
postgres LOG:  connection authorized: user=postgres database=postgres
postgres LOG:  statement: SELECT datname FROM pg_catalog.pg_database WHERE datname='first_database';
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: CREATE DATABASE second_database;
[unknown] LOG:  connection received: host=127.0.0.1 port=39710
postgres LOG:  connection authorized: user=postgres database=postgres
postgres LOG:  statement: SELECT datname FROM pg_catalog.pg_database WHERE datname='second_database';
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
[unknown] LOG:  connection received: host=[local]
freecodecamp LOG:  connection authorized: user=freecodecamp database=second_database application_name=psql
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: CREATE TABLE first_table();
[unknown] LOG:  connection received: host=127.0.0.1 port=46020
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM first_table;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=38674
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
postgres ERROR:  relation "second_table" does not exist at character 15
postgres STATEMENT:  SELECT * FROM second_table;
freecodecamp LOG:  statement: CREATE TABLE  second_table();
[unknown] LOG:  connection received: host=127.0.0.1 port=38682
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=54514
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: ALTER TABLE second_table ADD COLUMN first_column INT;
[unknown] LOG:  connection received: host=127.0.0.1 port=59292
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=50338
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
[unknown] LOG:  connection received: host=127.0.0.1 port=52938
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=52954
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp ERROR:  syntax error at or near "|" at character 1
freecodecamp STATEMENT:  |d
	ALTER TABLE second_table ADD COLUMN id INT;
freecodecamp LOG:  statement: ALTER TABLE second_table ADD COLUMN id INT;
[unknown] LOG:  connection received: host=127.0.0.1 port=57516
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE second_table ADD COLUMN age INT;
[unknown] LOG:  connection received: host=127.0.0.1 port=51318
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE second_table DROP COLUMN age;
[unknown] LOG:  connection received: host=127.0.0.1 port=40110
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE second_table DROP COLUMN first_column;
[unknown] LOG:  connection received: host=127.0.0.1 port=57262
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp ERROR:  syntax error at or near "ALTER" at character 54
freecodecamp STATEMENT:  ALTER TABLE second_table ADD COLUMN name VARCHAR(30)
	ALTER TABLE second_table ADD COLUMN name VARCHAR(30);
freecodecamp LOG:  statement: ALTER TABLE second_table ADD COLUMN name VARCHAR(30);
[unknown] LOG:  connection received: host=127.0.0.1 port=44098
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE second_table RENAME COLUMN name TO username;
[unknown] LOG:  connection received: host=127.0.0.1 port=48182
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: INSERT INTO second_table(id,username) VALUES(1,'Samus');
[unknown] LOG:  connection received: host=127.0.0.1 port=43918
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT columns FROM second_table;
freecodecamp ERROR:  column "columns" does not exist at character 8
freecodecamp STATEMENT:  SELECT columns FROM second_table;
freecodecamp LOG:  statement: SELECT *  FROM second_table;
freecodecamp LOG:  statement: INSERT INTO second_table(id,username) VALUES(1,'Mario');
[unknown] LOG:  connection received: host=127.0.0.1 port=52992
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=41394
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT * FROM second_table;
[unknown] LOG:  connection received: host=127.0.0.1 port=58962
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: DELETE FROM second_table WHERE username = 'Mario';
[unknown] LOG:  connection received: host=127.0.0.1 port=54992
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT * FROM username;
freecodecamp ERROR:  relation "username" does not exist at character 15
freecodecamp STATEMENT:  SELECT * FROM username;
freecodecamp LOG:  statement: SELECT * FROM second_table;
[unknown] LOG:  connection received: host=127.0.0.1 port=38504
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: INSERT INTO second_table(id,username) VALUES(2,'Mario');
[unknown] LOG:  connection received: host=127.0.0.1 port=41956
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp ERROR:  syntax error at or near "SELECT" at character 29
freecodecamp STATEMENT:  SELECT * FROM second_Table,
	SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: INSERT INTO second_table(id,username) VALUES(3,'Luigi');
[unknown] LOG:  connection received: host=127.0.0.1 port=50190
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT * FROM second_table;
[unknown] LOG:  connection received: host=127.0.0.1 port=57210
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
[unknown] LOG:  connection received: host=127.0.0.1 port=57222
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: DELETE FROM second_table WHERE username='Luigi';
[unknown] LOG:  connection received: host=127.0.0.1 port=42196
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: DELETE FROM second_table WHERE username = 'Mario';
[unknown] LOG:  connection received: host=127.0.0.1 port=35810
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: DELETE FROM second_table WHERE username='Samus';
[unknown] LOG:  connection received: host=127.0.0.1 port=37262
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp ERROR:  syntax error at or near "SELECT" at character 28
freecodecamp STATEMENT:  SELECT * FROM second_table
	SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE second_database DROP COLUMN username;
freecodecamp ERROR:  relation "second_database" does not exist
freecodecamp STATEMENT:  ALTER TABLE second_database DROP COLUMN username;
freecodecamp LOG:  statement: ALTER TABLE second_table  DROP COLUMN username;
[unknown] LOG:  connection received: host=127.0.0.1 port=60968
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: ALTER TABLE second_table DROP COLUMN id;
[unknown] LOG:  connection received: host=127.0.0.1 port=51044
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT * FROM second_table;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(second_table)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16390';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16390' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16390' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16390'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16390'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16390')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16390' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16390' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: DROP TABLE second_table;
[unknown] LOG:  connection received: host=127.0.0.1 port=52886
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT n.nspname as "Schema",
	        c.relname as "Name",
	        CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	        pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	      FROM pg_catalog.pg_class c
	          LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	      WHERE c.relkind IN ('r','p','v','m','S','f','')
	            AND n.nspname <> 'pg_catalog'
	            AND n.nspname <> 'information_schema'
	            AND n.nspname !~ '^pg_toast'
	        AND pg_catalog.pg_table_is_visible(c.oid)
	      ORDER BY 1,2;
freecodecamp ERROR:  syntax error at or near "TABLE" at character 33
freecodecamp STATEMENT:  DROP TABLE first_database,
	DROP TABLE first_table;
freecodecamp LOG:  statement: DROP TABLE first_table;
[unknown] LOG:  connection received: host=127.0.0.1 port=43908
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT n.nspname as "Schema",
	        c.relname as "Name",
	        CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	        pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	      FROM pg_catalog.pg_class c
	          LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	      WHERE c.relkind IN ('r','p','v','m','S','f','')
	            AND n.nspname <> 'pg_catalog'
	            AND n.nspname <> 'information_schema'
	            AND n.nspname !~ '^pg_toast'
	        AND pg_catalog.pg_table_is_visible(c.oid)
	      ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: ALTER DATABASE first_database RENAME TO mario_database;
[unknown] LOG:  connection received: host=127.0.0.1 port=36136
postgres LOG:  connection authorized: user=postgres database=second_database
postgres LOG:  statement: SELECT d.datname as "Name",
	          pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	          pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	          d.datcollate as "Collate",
	          d.datctype as "Ctype",
	          pg_catalog.array_to_string(d.datacl, E'
	') AS "Access privileges"
	      FROM pg_catalog.pg_database d
	      ORDER BY 1;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
[unknown] LOG:  connection received: host=[local]
freecodecamp LOG:  connection authorized: user=freecodecamp database=mario_database application_name=psql
freecodecamp ERROR:  syntax error at or near ";" at character 14
freecodecamp STATEMENT:  DROP DATABASE;
freecodecamp ERROR:  syntax error at or near ";" at character 15
freecodecamp STATEMENT:  DROP DATABASE
	;
freecodecamp LOG:  statement: DROP DATABASE second_database;
[unknown] LOG:  connection received: host=127.0.0.1 port=39266
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT d.datname as "Name",
	          pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	          pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	          d.datcollate as "Collate",
	          d.datctype as "Ctype",
	          pg_catalog.array_to_string(d.datacl, E'
	') AS "Access privileges"
	      FROM pg_catalog.pg_database d
	      ORDER BY 1;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(mario_database)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp ERROR:  syntax error at or near ";" at character 24
freecodecamp STATEMENT:  CREATE TABLE characters;
freecodecamp LOG:  statement: CREATE TABLE characters();
[unknown] LOG:  connection received: host=127.0.0.1 port=37276
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: ALTER TABLE characters ADD COLUMN character_id SERIAL;
[unknown] LOG:  connection received: host=127.0.0.1 port=33356
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT table_name, column_name, column_default, is_nullable FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(characters)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16393';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16393' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16393' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16393'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16393'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16393')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16393' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16393' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE characters  ADD COLUMN name VARCHAR(30) NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=50582
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'characters' AND column_name = 'name' AND data_type = 'character varying' AND character_maximum_length = 30;
freecodecamp LOG:  statement: ALTER TABLE characters ADD COLUMN homeland VARCHAR(60);
[unknown] LOG:  connection received: host=127.0.0.1 port=38984
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: ALTER TABLE characters ADD COLUMN favorite_color VARCHAR(30);
[unknown] LOG:  connection received: host=127.0.0.1 port=32946
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(characters)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16393';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16393' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16393' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16393'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16393'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16393')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16393' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16393' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: INSERT INTO characters(name,homeland,favorite_color) VALUES('Mario','Mushroom Kingdom','Red');
[unknown] LOG:  connection received: host=127.0.0.1 port=33100
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: INSERT INTO characters(name,homeland,favorite_color) VALUES('Luigi','Mushroom Kingdom','Green');
[unknown] LOG:  connection received: host=127.0.0.1 port=35446
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: INSERT INTO characters(name,homeland,favorite_color) VALUES('Peach','Mushroom Kingdom','Pink');
[unknown] LOG:  connection received: host=127.0.0.1 port=33036
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: INSERT INTO characters(name,homeland,favorite_color) VALUES('Toadstool','Mushroom Kingdom','Red'),('Bowser','Mushroom Kingdom','Green');
[unknown] LOG:  connection received: host=127.0.0.1 port=40868
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
[unknown] LOG:  connection received: host=127.0.0.1 port=48744
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: INSERT INTO characters(name,homeland,favorite_color) VALUES('Daisy','Sarasaland','Yellow'),('Yoshi','Dinosaur Land','Green');
[unknown] LOG:  connection received: host=127.0.0.1 port=48750
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: UPDATE characters SET favorite_color = 'Orange' WHERE name = 'Daisy';
[unknown] LOG:  connection received: host=127.0.0.1 port=42006
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: UPDATE characters SET name = 'Toad' WHERE favorite_color = 'Red';
[unknown] LOG:  connection received: host=127.0.0.1 port=51766
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: UPDATE characters SET name = 'Mario' WHERE character_id = 1;
[unknown] LOG:  connection received: host=127.0.0.1 port=57110
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(characters)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16393';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16393' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16393' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16393'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16393'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16393')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16393' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16393' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: UPDATE characters SET favorite_color = 'Blue' WHERE character_id = 4;
[unknown] LOG:  connection received: host=127.0.0.1 port=37860
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: UPDATE characters SET favorite_color = 'Yellow' WHERE character_id = 5;
[unknown] LOG:  connection received: host=127.0.0.1 port=36924
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: UPDATE characters SET homeland = 'Koopa Kingdom' WHERE character_id = 5;
[unknown] LOG:  connection received: host=127.0.0.1 port=54364
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM characters ORDER BY character_id;
freecodecamp LOG:  statement: ALTER TABLE second_table ADD PRIMARY KEY(character_id);
freecodecamp ERROR:  relation "second_table" does not exist
freecodecamp STATEMENT:  ALTER TABLE second_table ADD PRIMARY KEY(character_id);
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=46570
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(first_database)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	ORDER BY 1;
[unknown] LOG:  connection received: host=127.0.0.1 port=53024
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(mario_database)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(mario_database)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT d.datname as "Name",
	       pg_catalog.pg_get_userbyid(d.datdba) as "Owner",
	       pg_catalog.pg_encoding_to_char(d.encoding) as "Encoding",
	       d.datcollate as "Collate",
	       d.datctype as "Ctype",
	       pg_catalog.array_to_string(d.datacl, E'\n') AS "Access privileges"
	FROM pg_catalog.pg_database d
	WHERE d.datname OPERATOR(pg_catalog.~) '^(mario_database)$' COLLATE pg_catalog.default
	ORDER BY 1;
[unknown] LOG:  connection received: host=127.0.0.1 port=50102
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=48988
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(characters)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16393';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16393' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16393' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16393'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16393'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16393')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16393' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16393' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=59096
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: ALTER TABLE characters ADD PRIMARY KEY(character_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=54846
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
[unknown] LOG:  connection received: host=127.0.0.1 port=47884
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: ALTER TABLE characters ADD PRIMARY KEY(name);
freecodecamp ERROR:  multiple primary keys for table "characters" are not allowed
freecodecamp STATEMENT:  ALTER TABLE characters ADD PRIMARY KEY(name);
 LOG:  received fast shutdown request
 LOG:  aborting any active transactions
freecodecamp FATAL:  terminating connection due to administrator command
 LOG:  background worker "logical replication launcher" (PID 1007) exited with exit code 1
 LOG:  shutting down
 LOG:  database system is shut down
 LOG:  database system was shut down at 2025-08-02 13:51:30 CEST
 LOG:  database system is ready to accept connections
[unknown] LOG:  connection received: host=[local]
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=template1 application_name=psql
postgres LOG:  statement: 
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql
postgres LOG:  statement: SELECT 'CREATE USER freecodecamp WITH CREATEDB' WHERE NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname='freecodecamp')
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=postgres application_name=psql
postgres LOG:  statement: SELECT pg_terminate_backend(pg_stat_activity.pid)
	FROM pg_stat_activity
	WHERE usename = 'freecodecamp';
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: DROP DATABASE IF EXISTS mario_database;
postgres LOG:  statement: CREATE DATABASE mario_database WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'C.UTF-8' LC_CTYPE = 'C.UTF-8';
postgres LOG:  statement: ALTER DATABASE mario_database OWNER TO freecodecamp;
[unknown] LOG:  connection received: host=[local]
postgres LOG:  connection authorized: user=postgres database=mario_database application_name=psql
postgres LOG:  statement: SET statement_timeout = 0;
postgres LOG:  statement: SET lock_timeout = 0;
postgres LOG:  statement: SET idle_in_transaction_session_timeout = 0;
postgres LOG:  statement: SET client_encoding = 'UTF8';
postgres LOG:  statement: SET standard_conforming_strings = on;
postgres LOG:  statement: SELECT pg_catalog.set_config('search_path', '', false);
postgres LOG:  statement: SET check_function_bodies = false;
postgres LOG:  statement: SET xmloption = content;
postgres LOG:  statement: SET client_min_messages = warning;
postgres LOG:  statement: SET row_security = off;
postgres LOG:  statement: SET default_tablespace = '';
postgres LOG:  statement: SET default_table_access_method = heap;
postgres LOG:  statement: CREATE TABLE public.characters (
	    character_id integer NOT NULL,
	    name character varying(30) NOT NULL,
	    homeland character varying(60),
	    favorite_color character varying(30)
	);
postgres LOG:  statement: ALTER TABLE public.characters OWNER TO freecodecamp;
postgres LOG:  statement: CREATE SEQUENCE public.characters_character_id_seq
	    AS integer
	    START WITH 1
	    INCREMENT BY 1
	    NO MINVALUE
	    NO MAXVALUE
	    CACHE 1;
postgres LOG:  statement: ALTER TABLE public.characters_character_id_seq OWNER TO freecodecamp;
postgres LOG:  statement: ALTER SEQUENCE public.characters_character_id_seq OWNED BY public.characters.character_id;
postgres LOG:  statement: ALTER TABLE ONLY public.characters ALTER COLUMN character_id SET DEFAULT nextval('public.characters_character_id_seq'::regclass);
postgres LOG:  statement: INSERT INTO public.characters VALUES (2, 'Luigi', 'Mushroom Kingdom', 'Green');
postgres LOG:  statement: INSERT INTO public.characters VALUES (3, 'Peach', 'Mushroom Kingdom', 'Pink');
postgres LOG:  statement: INSERT INTO public.characters VALUES (7, 'Yoshi', 'Dinosaur Land', 'Green');
postgres LOG:  statement: INSERT INTO public.characters VALUES (6, 'Daisy', 'Sarasaland', 'Orange');
postgres LOG:  statement: INSERT INTO public.characters VALUES (1, 'Mario', 'Mushroom Kingdom', 'Red');
postgres LOG:  statement: INSERT INTO public.characters VALUES (4, 'Toad', 'Mushroom Kingdom', 'Blue');
postgres LOG:  statement: INSERT INTO public.characters VALUES (5, 'Bowser', 'Koopa Kingdom', 'Yellow');
postgres LOG:  statement: SELECT pg_catalog.setval('public.characters_character_id_seq', 7, true);
[unknown] LOG:  connection received: host=[local]
freecodecamp LOG:  connection authorized: user=freecodecamp database=mario_database application_name=psql
freecodecamp LOG:  statement: ALTER TABLE characters ADD PRIMARY KEY(name);
[unknown] LOG:  connection received: host=127.0.0.1 port=60432
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(characters)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16405';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16405' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16405' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16405' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16405'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16405'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16405')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16405' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16405' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE characters DROP CONSTRAINT characters_pkey;
[unknown] LOG:  connection received: host=127.0.0.1 port=50264
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(characters)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16405';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16405' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16405' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16405' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16405'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16405'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16405')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16405' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16405' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp ERROR:  syntax error at or near "PRIMARY" at character 17
freecodecamp STATEMENT:  ALTER TABLE ADD PRIMARY KEY(character_id);
freecodecamp LOG:  statement: ALTER TABLE characters ADD PRIMARY KEY(character_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=48178
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(characters)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16405';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16405' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16405' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16405' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16405'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16405'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16405')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16405' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16405' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp ERROR:  syntax error at or near ";" at character 23
freecodecamp STATEMENT:  CREATE TABLE more_info;
freecodecamp LOG:  statement: CREATE TABLE more_info();
[unknown] LOG:  connection received: host=127.0.0.1 port=39964
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(characters)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16405';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16405' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16405' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16405' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16405'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16405'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16405')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16405' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16405' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=39634
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT table_name, column_name, column_default, is_nullable FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(more_info)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16415';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16415' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16415' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16415'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16415'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16415')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16415' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16415' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=45596
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT table_name, column_name, column_default, is_nullable FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(more_info)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16415';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16415' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16415' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16415'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16415'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16415')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16415' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16415' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=57506
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT table_name, column_name, column_default, is_nullable FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public';
freecodecamp ERROR:  syntax error at or near "ALTER" at character 54
freecodecamp STATEMENT:  ALTER TABLE more_info ADD COLUMN more_info_id SERIAL
	ALTER TABLE more_info ADD COLUMN more_info_id SERIAL
	ALTER TABLE more_info ADD COLUMN more_info_id SERIAL;
freecodecamp LOG:  statement: ALTER TABLE more_info ADD COLUMN more_info_id SERIAL;
[unknown] LOG:  connection received: host=127.0.0.1 port=60436
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT table_name, column_name, column_default, is_nullable FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public';
freecodecamp ERROR:  syntax error at or near "(" at character 38
freecodecamp STATEMENT:  ALTER TABLE more_info ADD CONSTRAINTS(more_info_id);
freecodecamp LOG:  statement: ALTER TABLE more_info ADD CONSTRAINTS more_info_id;
freecodecamp ERROR:  type "more_info_id" does not exist at character 39
freecodecamp STATEMENT:  ALTER TABLE more_info ADD CONSTRAINTS more_info_id;
freecodecamp LOG:  statement: ALTER TABLE more_info ADD CONSTRAINTS more_info_id;
freecodecamp ERROR:  type "more_info_id" does not exist at character 39
freecodecamp STATEMENT:  ALTER TABLE more_info ADD CONSTRAINTS more_info_id;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
[unknown] LOG:  connection received: host=127.0.0.1 port=58462
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(more_info)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16415';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16415' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16415' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16415'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16415'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16415')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16415' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16415' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
[unknown] LOG:  connection received: host=127.0.0.1 port=49398
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: ALTER TABLE more_info ADD PRIMARY KEY(more_info_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=38880
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: ALTER TABLE more_info ADD COLUMN birthday DATE;
[unknown] LOG:  connection received: host=127.0.0.1 port=37002
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info;
freecodecamp ERROR:  syntax error at or near "ALTER" at character 45
freecodecamp STATEMENT:  ALTER TABLE more_info ADD COLUMN height INT
	ALTER TABLE more_info ADD COLUMN height INT;
freecodecamp LOG:  statement: ALTER TABLE more_info ADD COLUMN height INT;
[unknown] LOG:  connection received: host=127.0.0.1 port=56144
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: ALTER TABLE more_info ADD weight NUMERIC(4,1);
[unknown] LOG:  connection received: host=127.0.0.1 port=46196
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(more_info)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16415';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16415' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16415' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16415' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16415'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16415'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16415')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16415' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16415' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE more_info ADD COLUMN character_id INT REFERENCES characters(character_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=36108
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(more_info)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16415';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16415' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16415' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16415' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16415')
	                     UNION ALL VALUES ('16415'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16415' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16415'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16415'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16415')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16415' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16415' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16415' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE more_info ADD UNIQUE(character_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=39518
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'UNIQUE';
freecodecamp LOG:  statement: ALTER TABLE more_info ALTER COLUMN character_id SET NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=35520
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'more_info' AND column_name = 'character_id';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(more_info)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16415';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16415' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16415' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16415' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16415')
	                     UNION ALL VALUES ('16415'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16415' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16415'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16415'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16415')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16415' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16415' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16415' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp ERROR:  syntax error at or near "SELECT" at character 37
freecodecamp STATEMENT:  SELECT characters  FROM characters 
	SELECT character_id FROM characters;
freecodecamp ERROR:  syntax error at or near "SELECT" at character 37
freecodecamp STATEMENT:  SELECT characters  FROM characters 
	SELECT character_id FROM character;
freecodecamp ERROR:  syntax error at or near "SELECT" at character 37
freecodecamp STATEMENT:  SELECT characters  FROM characters 
	SELECT character_id FROM characters;
freecodecamp LOG:  statement: SELECT character_id FROM characters;
freecodecamp LOG:  statement: SELECT character_id,name FROM characters;
freecodecamp LOG:  statement: INSERT INTO more_info(character_id,birthday,weight,height) VALUES(1,'1981-07-09',64.5,155);
[unknown] LOG:  connection received: host=127.0.0.1 port=34378
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: select * from more_info full join characters using(character_id) where birthday = '1981-07-09' AND height = 155 AND weight = 64.5 AND name='Mario'
freecodecamp LOG:  statement: SELECT * FROM more_info
	;
freecodecamp LOG:  statement: SELECT character_id,name FROM character;
freecodecamp ERROR:  relation "character" does not exist at character 31
freecodecamp STATEMENT:  SELECT character_id,name FROM character;
freecodecamp LOG:  statement: SELECT character_id,name FROM characters;
freecodecamp ERROR:  syntax error at or near "INSER" at character 1
freecodecamp STATEMENT:  INSER INTO more_info(character_id,birthday,weight,height) VALUES(2,'1983-07-14',48.8,175);
freecodecamp LOG:  statement: INSERT INTO more_info(character_id,birthday,weight,height) VALUES(2,'1983-07-14',48.8,175);
[unknown] LOG:  connection received: host=127.0.0.1 port=46914
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info FULL JOIN characters USING(character_id) WHERE birthday = '1983-07-14' AND height = 175 AND weight = 48.8 AND name = 'Luigi'
freecodecamp LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: SELECT character_id,name FROM  characters;
freecodecamp LOG:  statement: INSERT INTO more_info(character_id,birthday,weight,height) VALUES(3,'1985-10-18',52.2,173);
[unknown] LOG:  connection received: host=127.0.0.1 port=35684
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info FULL JOIN characters USING(character_id) WHERE birthday = '1985-10-18' AND height = 173 AND weight = 52.2 AND name = 'Peach'
freecodecamp LOG:  statement: SELECT id FROM characters WHERE name = 'Samus';
freecodecamp ERROR:  column "id" does not exist at character 8
freecodecamp STATEMENT:  SELECT id FROM characters WHERE name = 'Samus';
freecodecamp LOG:  statement: SELECT character_id,name FROM characters WHERE username = 'Toad';
freecodecamp ERROR:  column "username" does not exist at character 48
freecodecamp STATEMENT:  SELECT character_id,name FROM characters WHERE username = 'Toad';
freecodecamp LOG:  statement: SELECT character_id,name FROM characters WHERE name = 'Toad';
freecodecamp LOG:  statement: INSERT INTO more_info(character_id,birthday,weight,height) VALUES(4,'1950-01-10',35.6,66);
[unknown] LOG:  connection received: host=127.0.0.1 port=45694
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info FULL JOIN characters USING(character_id) WHERE birthday = '1950-01-10' AND height = 66 AND weight = 35.6 AND name = 'Toad'
freecodecamp LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: SELECT character_id,name FROM characters WHERE name = 'Bowser';
freecodecamp LOG:  statement: INSERT INTO more_info(character_id,birthday,weight,height) VALUES(5,'1990-10-29',300,258);
[unknown] LOG:  connection received: host=127.0.0.1 port=43542
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info FULL JOIN characters USING(character_id) WHERE birthday = '1990-10-29' AND height = 258 AND weight = 300 AND name = 'Bowser'
freecodecamp LOG:  statement: SELECT character_id,name FROM characters WHERE name = 'Daisy';
freecodecamp ERROR:  syntax error at or near "(" at character 12
freecodecamp STATEMENT:  INSERT INTO(character_id,birthday,weight,height) VALUES(6,'1989-07-31',NULL,NULL);
freecodecamp LOG:  statement: INSERT INTO more_info(character_id,birthday,weight,height) VALUES(6,'1989-07-31',NULL,NULL);
[unknown] LOG:  connection received: host=127.0.0.1 port=48166
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info FULL JOIN characters USING(character_id) WHERE birthday = '1989-07-31' AND height IS NULL AND weight IS NULL AND name = 'Daisy'
freecodecamp LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: SELECT character_id,name FROM characters WHERE name = 'Yoshi';
freecodecamp LOG:  statement: INSERT INTO more_info(character_id,birhtday,weight,height) VALUES(7,'1990-04-13',59.1,162);
freecodecamp ERROR:  column "birhtday" of relation "more_info" does not exist at character 36
freecodecamp STATEMENT:  INSERT INTO more_info(character_id,birhtday,weight,height) VALUES(7,'1990-04-13',59.1,162);
freecodecamp LOG:  statement: INSERT INTO more_info(character_id,birthday,weight,height) VALUES(7,'1990-04-13',59.1,162);
[unknown] LOG:  connection received: host=127.0.0.1 port=38080
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info FULL JOIN characters USING(character_id) WHERE birthday = '1990-04-13' AND height = 162 AND weight = 59.1 AND name = 'Yoshi'
freecodecamp LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: ALTER TABLE more_info RENAME COLUMN height TO height_in_cm;
[unknown] LOG:  connection received: host=127.0.0.1 port=59718
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: ALTER TABLE more_info RENAME COLUMN weighT to weight_in_kg;
[unknown] LOG:  connection received: host=127.0.0.1 port=53766
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: CREATE TABLE sounds(sound_id SERIAL PRIMARY KEY);
[unknown] LOG:  connection received: host=127.0.0.1 port=36856
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'sounds' AND c.column_name = 'sound_id';
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'sounds' AND column_name = 'sound_id';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp ERROR:  syntax error at or near "CONSTRAINTS" at character 68
freecodecamp STATEMENT:  ALTER TABLE sounds ADD COLUMN filename VARCHAR(40) NOT NULL UNIQUE CONSTRAINTS;
freecodecamp ERROR:  syntax error at or near "CONSTRAINS" at character 68
freecodecamp STATEMENT:  ALTER TABLE sounds ADD COLUMN filename VARCHAR(40) NOT NULL UNIQUE CONSTRAINS;
freecodecamp LOG:  statement: ALTER TABLE sounds ADD COLUMN filename VARCHAR(40) NOT NULL UNIQUE;
[unknown] LOG:  connection received: host=127.0.0.1 port=51416
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'sounds' AND column_name = 'filename' AND data_type = 'character varying' AND character_maximum_length = 40;
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'UNIQUE';
freecodecamp ERROR:  syntax error at or near "FOREIGN" at character 57
freecodecamp STATEMENT:  ALTER TABLE sounds ADD COLUMN character_id INT NOT NULL FOREIGN KEY characters(character_id);
freecodecamp ERROR:  syntax error at or near "ADD" at character 57
freecodecamp STATEMENT:  ALTER TABLE sounds ADD COLUMN character_id INT NOT NULL ADD ,FOREIGN KEY characters(character_id);
freecodecamp ERROR:  syntax error at or near "ADD" at character 57
freecodecamp STATEMENT:  ALTER TABLE sounds ADD COLUMN character_id INT NOT NULL ADD FOREIGN KEY characters(character_id);
freecodecamp LOG:  statement: ALTER TABLE sounds ADD COLUMN character_id INT NOT NULL  REFERENCES characters(character_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=56212
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'sounds' AND column_name = 'character_id' AND data_type = 'integer';
freecodecamp LOG:  statement: SELECT * FROM sounds
	;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(sounds)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16435';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16435' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16435' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16435' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16435')
	                     UNION ALL VALUES ('16435'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16435' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16435'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16435'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16435')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16435' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16435' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16435' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT * FROM characters ORDER BY character_id;
freecodecamp ERROR:  syntax error at or near "INSER" at character 1
freecodecamp STATEMENT:  INSER INTO sounds(filename,character_id) VALUES(its-a-me.wav,1);
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES(its-a-me.wav,1);
freecodecamp ERROR:  column "its" does not exist at character 50
freecodecamp STATEMENT:  INSERT INTO sounds(filename,character_id) VALUES(its-a-me.wav,1);
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('its-a-me.wav',1);
[unknown] LOG:  connection received: host=127.0.0.1 port=46738
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'its-a-me.wav' AND name = 'Mario'
freecodecamp ERROR:  syntax error at or near "(" at character 12
freecodecamp STATEMENT:  INSERT INTO()filename,character_id) VALUES('yippie.wav',1);
freecodecamp ERROR:  syntax error at or near "(" at character 12
freecodecamp STATEMENT:  INSERT INTO(filename,character_id) VALUES('yippie.wav',1);
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('yippie.wav',1);
[unknown] LOG:  connection received: host=127.0.0.1 port=55376
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'yippee.wav' AND name = 'Mario'
[unknown] LOG:  connection received: host=127.0.0.1 port=55382
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'yippee.wav' AND name = 'Mario'
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('yippee.wav',1);
[unknown] LOG:  connection received: host=127.0.0.1 port=51338
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'yippee.wav' AND name = 'Mario'
freecodecamp ERROR:  syntax error at or near "SELECT" at character 22
freecodecamp STATEMENT:  SELECT * FROM sounds
	SELECT * FROM sound
	;
freecodecamp LOG:  statement: SELECT * FROM sounds;
[unknown] LOG:  connection received: host=127.0.0.1 port=57728
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'ha-ha.wav' AND name = 'Luigi'
freecodecamp LOG:  statement: DELETE FROM sounds WHERE sound_id = 2 AND sound_id = 3;
[unknown] LOG:  connection received: host=127.0.0.1 port=39080
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'ha-ha.wav' AND name = 'Luigi'
freecodecamp LOG:  statement: SELECT * FROM  sounds;
[unknown] LOG:  connection received: host=127.0.0.1 port=53206
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'ha-ha.wav' AND name = 'Luigi'
freecodecamp LOG:  statement: DELETE FROM sounds WHERE sound_id = 2 OR sound_id = 3;
[unknown] LOG:  connection received: host=127.0.0.1 port=37896
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'ha-ha.wav' AND name = 'Luigi'
freecodecamp LOG:  statement: SELECT * FROM  sounds;
[unknown] LOG:  connection received: host=127.0.0.1 port=37902
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'ha-ha.wav' AND name = 'Luigi'
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('yippee.wav',1);
[unknown] LOG:  connection received: host=127.0.0.1 port=37008
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'ha-ha.wav' AND name = 'Luigi'
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('ha-ha.wav',2);
[unknown] LOG:  connection received: host=127.0.0.1 port=56312
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'ha-ha.wav' AND name = 'Luigi'
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('oh-yeah.wav',2);
[unknown] LOG:  connection received: host=127.0.0.1 port=59510
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'oh-yeah.wav' AND name = 'Luigi'
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('woo-hoo.wav',3);
[unknown] LOG:  connection received: host=127.0.0.1 port=38152
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'yay.wav' AND name = 'Peach'
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'woo-hoo.wav' AND name = 'Peach'
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('yay.wav',3);
[unknown] LOG:  connection received: host=127.0.0.1 port=60088
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'yay.wav' AND name = 'Peach'
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'woo-hoo.wav' AND name = 'Peach'
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('mm-hmm.wav',3);
[unknown] LOG:  connection received: host=127.0.0.1 port=35590
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'mm-hmm.wav' AND name = 'Peach'
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'yahoo.wav' AND name = 'Mario'
freecodecamp LOG:  statement: INSERT INTO sounds(filename,character_id) VALUES('yahoo.wav',1);
[unknown] LOG:  connection received: host=127.0.0.1 port=38842
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'mm-hmm.wav' AND name = 'Peach'
postgres LOG:  statement: SELECT * FROM sounds FULL JOIN characters USING(character_id) WHERE filename = 'yahoo.wav' AND name = 'Mario'
freecodecamp LOG:  statement: SELECT * FROM sounds;
freecodecamp LOG:  statement: CREATE TABLE actions(action_id SERIAL PRIMARY KEY);
[unknown] LOG:  connection received: host=127.0.0.1 port=39798
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT c.table_name, c.column_name FROM information_schema.key_column_usage AS c LEFT JOIN information_schema.table_constraints AS t ON t.constraint_name = c.constraint_name WHERE t.constraint_type = 'PRIMARY KEY' AND t.table_name = 'actions' AND c.column_name = 'action_id';
postgres LOG:  statement: SELECT column_default FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND table_name = 'actions' AND column_name = 'action_id';
freecodecamp LOG:  statement: ALTER TABLE actions ADD COLUMN action VARCHAR(20) NOT NULL UNIQUE;
[unknown] LOG:  connection received: host=127.0.0.1 port=49180
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'actions' AND column_name = 'action' AND data_type = 'character varying' AND character_maximum_length = 20;
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'UNIQUE';
freecodecamp LOG:  statement: INSERT INTO actions(action) VALUES('run');
[unknown] LOG:  connection received: host=127.0.0.1 port=41852
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM actions WHERE action = 'run';
freecodecamp LOG:  statement: INSERT INTO actions(action) VALUES('jump');
[unknown] LOG:  connection received: host=127.0.0.1 port=44156
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM actions WHERE action = 'jump';
freecodecamp LOG:  statement: INSERT INTO actions(action) VALUES('duck');
[unknown] LOG:  connection received: host=127.0.0.1 port=46856
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM actions WHERE action = 'duck';
freecodecamp LOG:  statement: SELECT * FROM actions;
freecodecamp ERROR:  syntax error at or near ";" at character 31
freecodecamp STATEMENT:  CREATE TABLE character_actions;
freecodecamp LOG:  statement: CREATE TABLE character_actions();
[unknown] LOG:  connection received: host=127.0.0.1 port=48806
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions;
freecodecamp LOG:  statement: ALTER TABLE character_actions ADD COLUMN character_id INT NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=35806
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'character_actions' AND column_name = 'character_id' AND data_type = 'integer';
freecodecamp LOG:  statement: ALTER TABLE character_actions ADD FOREIGN KEY(character_id) REFERENCES characters(character_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=56100
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(character_actions)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16458';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16458' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16458' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16458')
	                     UNION ALL VALUES ('16458'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16458' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16458'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16458'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16458')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16458' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16458' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16458' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: ALTER TABLE character_actions ADD COLUMN action_id INT NOT NULL;
[unknown] LOG:  connection received: host=127.0.0.1 port=40378
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'public' AND is_nullable = 'NO' AND table_name = 'character_actions' AND column_name = 'action_id' AND data_type = 'integer';
freecodecamp LOG:  statement: ALTER TABLE character_actions ADD FOREIGN KEY (action_id) REFERENCES actions(action_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=59830
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'FOREIGN KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(character_actions)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16458';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16458' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16458' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16458')
	                     UNION ALL VALUES ('16458'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16458' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16458'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16458'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16458')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16458' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16458' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16458' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp ERROR:  syntax error at or near "," at character 1
freecodecamp STATEMENT:  ,
	ALTER TABLE character_actions ADD PRIMARY KEY(character_id,action_id);
freecodecamp LOG:  statement: ALTER TABLE character_actions ADD PRIMARY KEY(character_id,action_id);
[unknown] LOG:  connection received: host=127.0.0.1 port=37980
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT tc.table_schema, tc.constraint_name, tc.table_name, kcu.column_name, ccu.table_name AS foreign_table_name, ccu.column_name AS foreign_column_name FROM information_schema.table_constraints tc JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage ccu ON ccu.constraint_name = tc.constraint_name WHERE constraint_type = 'PRIMARY KEY';
freecodecamp LOG:  statement: SELECT c.oid,
	  n.nspname,
	  c.relname
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relname OPERATOR(pg_catalog.~) '^(character_actions)$' COLLATE pg_catalog.default
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 2, 3;
freecodecamp LOG:  statement: SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, false AS relhasoids, c.relispartition, '', c.reltablespace, CASE WHEN c.reloftype = 0 THEN '' ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
	FROM pg_catalog.pg_class c
	 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
	LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
	WHERE c.oid = '16458';
freecodecamp LOG:  statement: SELECT a.attname,
	  pg_catalog.format_type(a.atttypid, a.atttypmod),
	  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, true)
	   FROM pg_catalog.pg_attrdef d
	   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
	  a.attnotnull,
	  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
	   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
	  a.attidentity,
	  a.attgenerated
	FROM pg_catalog.pg_attribute a
	WHERE a.attrelid = '16458' AND a.attnum > 0 AND NOT a.attisdropped
	ORDER BY a.attnum;
freecodecamp LOG:  statement: SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, 0, true),
	  pg_catalog.pg_get_constraintdef(con.oid, true), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
	FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
	  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ('p','u','x'))
	WHERE c.oid = '16458' AND c.oid = i.indrelid AND i.indexrelid = c2.oid
	ORDER BY i.indisprimary DESC, i.indisunique DESC, c2.relname;
freecodecamp LOG:  statement: SELECT true as sametable, conname,
	  pg_catalog.pg_get_constraintdef(r.oid, true) as condef,
	  conrelid::pg_catalog.regclass AS ontable
	FROM pg_catalog.pg_constraint r
	WHERE r.conrelid = '16458' AND r.contype = 'f'
	     AND conparentid = 0
	ORDER BY conname
freecodecamp LOG:  statement: SELECT conname, conrelid::pg_catalog.regclass AS ontable,
	       pg_catalog.pg_get_constraintdef(oid, true) AS condef
	  FROM pg_catalog.pg_constraint c
	 WHERE confrelid IN (SELECT pg_catalog.pg_partition_ancestors('16458')
	                     UNION ALL VALUES ('16458'::pg_catalog.regclass))
	       AND contype = 'f' AND conparentid = 0
	ORDER BY conname;
freecodecamp LOG:  statement: SELECT pol.polname, pol.polpermissive,
	  CASE WHEN pol.polroles = '{0}' THEN NULL ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),',') END,
	  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
	  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
	  CASE pol.polcmd
	    WHEN 'r' THEN 'SELECT'
	    WHEN 'a' THEN 'INSERT'
	    WHEN 'w' THEN 'UPDATE'
	    WHEN 'd' THEN 'DELETE'
	    END AS cmd
	FROM pg_catalog.pg_policy pol
	WHERE pol.polrelid = '16458' ORDER BY 1;
freecodecamp LOG:  statement: SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace AS nsp, stxname,
	  (SELECT pg_catalog.string_agg(pg_catalog.quote_ident(attname),', ')
	   FROM pg_catalog.unnest(stxkeys) s(attnum)
	   JOIN pg_catalog.pg_attribute a ON (stxrelid = a.attrelid AND
	        a.attnum = s.attnum AND NOT attisdropped)) AS columns,
	  'd' = any(stxkind) AS ndist_enabled,
	  'f' = any(stxkind) AS deps_enabled,
	  'm' = any(stxkind) AS mcv_enabled
	FROM pg_catalog.pg_statistic_ext stat WHERE stxrelid = '16458'
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT pubname
	FROM pg_catalog.pg_publication p
	JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
	WHERE pr.prrelid = '16458'
	UNION ALL
	SELECT pubname
	FROM pg_catalog.pg_publication p
	WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable('16458')
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT t.tgname, pg_catalog.pg_get_triggerdef(t.oid, true), t.tgenabled, t.tgisinternal
	FROM pg_catalog.pg_trigger t
	WHERE t.tgrelid = '16458' AND (NOT t.tgisinternal OR (t.tgisinternal AND t.tgenabled = 'D') 
	    OR EXISTS (SELECT 1 FROM pg_catalog.pg_depend WHERE objid = t.oid 
	        AND refclassid = 'pg_catalog.pg_trigger'::pg_catalog.regclass))
	ORDER BY 1;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhparent AND i.inhrelid = '16458' AND c.relkind != 'p' ORDER BY inhseqno;
freecodecamp LOG:  statement: SELECT c.oid::pg_catalog.regclass,       pg_catalog.pg_get_expr(c.relpartbound, c.oid),       c.relkind FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i WHERE c.oid=i.inhrelid AND i.inhparent = '16458' ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = 'DEFAULT',          c.oid::pg_catalog.regclass::pg_catalog.text;
freecodecamp LOG:  statement: SELECT * FROM actions;
[unknown] LOG:  connection received: host=127.0.0.1 port=54566
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Yoshi'
freecodecamp LOG:  statement: SELECT * FROM characters;
[unknown] LOG:  connection received: host=127.0.0.1 port=39948
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Yoshi'
freecodecamp ERROR:  syntax error at or near "(" at character 73
freecodecamp STATEMENT:  INSERT INTO character_actions(character_id,action_id) VALUES (7,1),(7,2)(7,3);
freecodecamp ERROR:  syntax error at or near "(" at character 74
freecodecamp STATEMENT:  INSERT INTO character_actions(character_id,action_id) VALUES ((7,1),(7,2)(7,3));
freecodecamp LOG:  statement: INSERT INTO character_actions(character_id,action_id) VALUES (7,1),(7,2),(7,3);
[unknown] LOG:  connection received: host=127.0.0.1 port=57942
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Yoshi'
freecodecamp LOG:  statement: SELECT * FROM character_actions
	;
freecodecamp LOG:  statement: INSERT INTO character_actions(character_id,action_id) VALUES (6,1),(6,2),(6,3);
[unknown] LOG:  connection received: host=127.0.0.1 port=46048
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Daisy'
freecodecamp LOG:  statement: INSERT INTO character_actions(character_id,action_id) VALUES (5,1),(5,2),(5,3);
[unknown] LOG:  connection received: host=127.0.0.1 port=47210
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Bowser'
freecodecamp LOG:  statement: INSERT INTO character_actions(character_id,action_id) VALUES (4,1),(4,2),(4,3);
[unknown] LOG:  connection received: host=127.0.0.1 port=45310
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Toad'
freecodecamp LOG:  statement: INSERT INTO character_actions(character_id,action_id) VALUES (3,1),(3,2),(3,3);
[unknown] LOG:  connection received: host=127.0.0.1 port=42704
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Peach'
freecodecamp LOG:  statement: INSERT INTO character_actions(character_id,action_id) VALUES (2,1),(2,2),(2,3);
[unknown] LOG:  connection received: host=127.0.0.1 port=47222
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Luigi'
freecodecamp LOG:  statement: INSERT INTO character_actions(character_id,action_id) VALUES (1,1),(1,2),(1,3);
[unknown] LOG:  connection received: host=127.0.0.1 port=52460
postgres LOG:  connection authorized: user=postgres database=mario_database
postgres LOG:  statement: SELECT * FROM character_actions FULL JOIN characters USING(character_id) FULL JOIN actions USING(action_id) WHERE name = 'Mario'
freecodecamp LOG:  statement: SELECT * FROM character_actions;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM actions;
freecodecamp LOG:  statement: SELECT * FROM sounds;
freecodecamp LOG:  statement: SELECT * FROM character_actions;
freecodecamp LOG:  statement: SELECT n.nspname as "Schema",
	  c.relname as "Name",
	  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' WHEN 'I' THEN 'partitioned index' END as "Type",
	  pg_catalog.pg_get_userbyid(c.relowner) as "Owner"
	FROM pg_catalog.pg_class c
	     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
	WHERE c.relkind IN ('r','p','v','m','S','f','')
	      AND n.nspname <> 'pg_catalog'
	      AND n.nspname <> 'information_schema'
	      AND n.nspname !~ '^pg_toast'
	  AND pg_catalog.pg_table_is_visible(c.oid)
	ORDER BY 1,2;
freecodecamp LOG:  statement: SELECT * FROM characters;
freecodecamp LOG:  statement: SELECT * FROM more_info;
freecodecamp LOG:  statement: SELECT * FROM characters FULL JOIN more_info ON character_id = character_id;
freecodecamp ERROR:  column reference "character_id" is ambiguous at character 49
freecodecamp STATEMENT:  SELECT * FROM characters FULL JOIN more_info ON character_id = character_id;
freecodecamp LOG:  statement: SELECT * FROM characters FULL JOIN more_info ON character_id = character_id;
freecodecamp ERROR:  column reference "character_id" is ambiguous at character 49
freecodecamp STATEMENT:  SELECT * FROM characters FULL JOIN more_info ON character_id = character_id;
freecodecamp LOG:  statement: SELECT * FROM characters FULL JOIN more_info ON characters.character_id = more_info.character_id;
freecodecamp LOG:  statement: SELECT * FROM characters FULL JOIN sounds  ON characters.character_id = sounds.character_id;
freecodecamp LOG:  statement: SELECT * FROM character_actions 
	FULL JOIN actions ON character_actions.action_id = actions.action_id
	Full JOIN characters ON character_actions.character_id = character.character_id;
freecodecamp ERROR:  missing FROM-clause entry for table "character" at character 160
freecodecamp STATEMENT:  SELECT * FROM character_actions 
	FULL JOIN actions ON character_actions.action_id = actions.action_id
	Full JOIN characters ON character_actions.character_id = character.character_id;
freecodecamp LOG:  statement: SELECT * FROM character_actions 
	FULL JOIN actions ON character_actions.action_id = actions.action_id
	Full JOIN characters ON character_actions.character_id = character.character_id;
freecodecamp ERROR:  missing FROM-clause entry for table "character" at character 160
freecodecamp STATEMENT:  SELECT * FROM character_actions 
	FULL JOIN actions ON character_actions.action_id = actions.action_id
	Full JOIN characters ON character_actions.character_id = character.character_id;
freecodecamp LOG:  statement: SELECT * FROM character_actions FULL JOIN actions ON character_actions.action_id = actions.action_id FULL JOIN characters ON character_actions.character_id = character.character_id;
freecodecamp ERROR:  missing FROM-clause entry for table "character" at character 159
freecodecamp STATEMENT:  SELECT * FROM character_actions FULL JOIN actions ON character_actions.action_id = actions.action_id FULL JOIN characters ON character_actions.character_id = character.character_id;
freecodecamp LOG:  statement: SELECT * FROM character_actions FULL JOIN actions ON character_actions.action_id = actions.action_id FULL JOIN characters ON character_actions.character_id = characters.character_id;
